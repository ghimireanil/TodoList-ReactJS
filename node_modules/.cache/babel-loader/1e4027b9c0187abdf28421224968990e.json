{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/anilghimire/Desktop/TodoList-ReactJS/src/TodoList/Todo.js\";\nimport React, { Component } from 'react';\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem: '',\n      list: []\n    };\n  } //incorporating local storage\n\n\n  componentDidMount() {\n    this.hydrateStateWithLocalStorage(); // add event listener to save state to localStorage\n    // when user leaves/refreshes the page\n\n    window.addEventListener('beforeunload', this.saveStateToLocalStorage.bind(this));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.saveStateToLocalStorage.bind(this)); // saves if component has a chance to unmount\n\n    this.saveStateToLocalStorage();\n  }\n\n  hydrateStateWithLocalStorage() {\n    // for all items in state\n    for (let key in this.state) {\n      // if the key exists in localStorage\n      if (localStorage.hasOwnProperty(key)) {\n        // get the key's value from localStorage\n        let value = localStorage.getItem(key); // parse the localStorage string and setState\n\n        try {\n          value = JSON.parse(value);\n          this.setState({\n            [key]: value\n          });\n        } catch (e) {\n          // handle empty string\n          this.setState({\n            [key]: value\n          });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage() {\n    // for every item in React state\n    for (let key in this.state) {\n      // save to localStorage\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  updateInput(key, value) {\n    // update react state\n    this.setState({\n      [key]: value\n    });\n  }\n\n  addItem() {\n    // create a new item with unique id\n    const newItem = {\n      id: 1 + Math.random(),\n      value: this.state.newItem.slice()\n    }; // copy current list of items\n\n    const list = [...this.state.list]; // add the new item to the list\n\n    list.push(newItem); // update state with new list, reset the new item input\n\n    this.setState({\n      list,\n      newItem: ''\n    });\n  }\n\n  deleteItem(id) {\n    // copy current list of items\n    const list = [...this.state.list]; // filter out the item being deleted\n\n    const updatedList = list.filter(item => item.id !== id);\n    this.setState({\n      list: updatedList\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"app-title\",\n        children: \"MY TODO LIST\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: 30,\n            textAlign: 'left',\n            maxWidth: 500,\n            margin: 'auto'\n          },\n          children: [\"Add Items in the list...\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type item here\",\n            value: this.state.newItem,\n            onChange: e => this.updateInput('newItem', e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-btn btn-floating\",\n            onClick: () => this.addItem(),\n            disabled: !this.state.newItem.length,\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              class: \"material-icons\",\n              children: \" + \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: this.state.list.map(item => {\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [item.value, /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-floating\",\n                  onClick: () => this.deleteItem(item.id),\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    class: \"material-icons\",\n                    children: \"x\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 135,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 21\n                }, this)]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Todo;","map":{"version":3,"sources":["/Users/anilghimire/Desktop/TodoList-ReactJS/src/TodoList/Todo.js"],"names":["React","Component","Todo","constructor","props","state","newItem","list","componentDidMount","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","componentWillUnmount","removeEventListener","key","localStorage","hasOwnProperty","value","getItem","JSON","parse","setState","e","setItem","stringify","updateInput","addItem","id","Math","random","slice","push","deleteItem","updatedList","filter","item","render","padding","textAlign","maxWidth","margin","target","length","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem: '',\n      list: [],\n    };\n  }\n\n  //incorporating local storage\n  componentDidMount() {\n    this.hydrateStateWithLocalStorage();\n\n    // add event listener to save state to localStorage\n    // when user leaves/refreshes the page\n    window.addEventListener(\n      'beforeunload',\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      'beforeunload',\n      this.saveStateToLocalStorage.bind(this)\n    );\n\n    // saves if component has a chance to unmount\n    this.saveStateToLocalStorage();\n  }\n\n  hydrateStateWithLocalStorage() {\n    // for all items in state\n    for (let key in this.state) {\n      // if the key exists in localStorage\n      if (localStorage.hasOwnProperty(key)) {\n        // get the key's value from localStorage\n        let value = localStorage.getItem(key);\n\n        // parse the localStorage string and setState\n        try {\n          value = JSON.parse(value);\n          this.setState({ [key]: value });\n        } catch (e) {\n          // handle empty string\n          this.setState({ [key]: value });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage() {\n    // for every item in React state\n    for (let key in this.state) {\n      // save to localStorage\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  updateInput(key, value) {\n    // update react state\n    this.setState({ [key]: value });\n  }\n\n  addItem() {\n    // create a new item with unique id\n    const newItem = {\n      id: 1 + Math.random(),\n      value: this.state.newItem.slice(),\n    };\n\n    // copy current list of items\n    const list = [...this.state.list];\n\n    // add the new item to the list\n    list.push(newItem);\n\n    // update state with new list, reset the new item input\n    this.setState({\n      list,\n      newItem: '',\n    });\n  }\n\n  deleteItem(id) {\n    // copy current list of items\n    const list = [...this.state.list];\n    // filter out the item being deleted\n    const updatedList = list.filter((item) => item.id !== id);\n\n    this.setState({ list: updatedList });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className='app-title'>MY TODO LIST</h1>\n\n        <div className='container'>\n          <div\n            style={{\n              padding: 30,\n              textAlign: 'left',\n              maxWidth: 500,\n              margin: 'auto',\n            }}\n          >\n            Add Items in the list...\n            <br />\n            <input\n              type='text'\n              placeholder='Type item here'\n              value={this.state.newItem}\n              onChange={(e) => this.updateInput('newItem', e.target.value)}\n            />\n            <button\n              className='add-btn btn-floating'\n              onClick={() => this.addItem()}\n              disabled={!this.state.newItem.length}\n            >\n              <i class='material-icons'> + </i>\n            </button>\n            <br /> <br />\n            <ul>\n              {this.state.list.map((item) => {\n                return (\n                  <li key={item.id}>\n                    {item.value}\n                    <button\n                      className='btn btn-floating'\n                      onClick={() => this.deleteItem(item.id)}\n                    >\n                      <i class='material-icons'>x</i>\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n"]},"metadata":{},"sourceType":"module"}